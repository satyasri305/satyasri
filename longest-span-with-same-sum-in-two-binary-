class Solution {
public:
    int longestCommonSum(bool arr1[], bool arr2[], int n) {
            int diff[n];
        for(int i=0;i<n;i++)
        {
            diff[i] = arr1[i]-arr2[i];
        }
        int sum[n],s=0;
        for(int i=0;i<n;i++)
        {
            s += diff[i];
            sum[i] = s;
        }
        unordered_map<int,int> m;
        //m[sum[0]] = -1;
        int ans = 0,Max = 0;
        for(int i=0;i<n;i++)
        {
            if(sum[i]==0)
                ans = i+1;
            else if(m.find(sum[i])!=m.end())
                ans = i-m[sum[i]];
            else
                m[sum[i]] = i;
            Max = max(ans,Max);
        }
        return Max;
    
    }
    }
   i nt main(O t
int t; cin > t ;
while (t--) { int n, i; cin>> n ;
booL arr1 [n], arr2 [n];
For (i = 0; i < n; i++) { 
cin > arr1[i];
for (i = 0 i< n; i++) {
cin >>arr2[i];
auto ans =ob.longestCommonSum (arr1, arr2, n); 
cout << ans <<"\n";
}
return 0;
}

    
