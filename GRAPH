mport java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
 
// A class to store a graph edge
class Edge
{
    int source, dest;
 
    public Edge(int source, int dest)
    {
        this.source = source;
        this.dest = dest;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList = null;
 
    // Constructor
    Graph(List<Edge> edges, int N)
    {
        adjList = new ArrayList<>();
 
        for (int i = 0; i < N; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the undirected graph
        for (Edge edge: edges)
        {
            int src = edge.source;
            int dest = edge.dest;
 
            adjList.get(src).add(dest);
        }
    }
}
 
class Main
{
    // `C` is a connectivity matrix and stores transitive closure of a graph
    // `root` is the topmost node in DFS tree (it is the starting vertex of DFS)
    // `descendant` is current vertex to be explored in DFS.
    // Invariant: A path already exists in the graph from `root` to `descendant`
    public static void DFS(Graph graph, byte[][] C, int root, int descendant)
    {
        for (int child: graph.adjList.get(descendant))
        {
            // if `child` is an adjacent vertex of descendant, we have
            // found a path from root->child
            if (C[root][child] == 0)
            {
                C[root][child] = 1;
                DFS(graph, C, root, child);
            }
        }
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
        List<Edge> edges = Arrays.asList(
                new Edge(0, 2), new Edge(1, 0), new Edge(3, 1)
        );
 
        // total number of nodes in the graph
        final int N = 4;
 
        // build a graph from the given edges
        Graph graph = new Graph(edges, N);
 
        // `C` is a connectivity matrix and stores the transitive closure
        // of the graph. The value of `C[i][j]` is 1 only if a directed
        // path exists from vertex `i` to vertex `j`.
        byte C[][] = new byte[N][N];
 
        // consider each vertex and start DFS from it
        for (int v = 0; v < N; v++)
        {
            C[v][v] = 1;
            DFS(graph, C, v, v);
 
            // print path info for vertex `v`
            System.out.println(Arrays.toString(C[v]));
        }
    }
}
