import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
 
// A class to store a graph edge
class Edge
{
    int source, dest;
 
    public Edge(int source, int dest)
    {
        this.source = source;
        this.dest = dest;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList = null;
 
    // Constructor
    Graph(List<Edge> edges, int N)
    {
        adjList = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the directed graph
        for (Edge edge: edges)
        {
            int src = edge.source;
            int dest = edge.dest;
 
            adjList.get(src).add(dest);
        }
    }
}
 
class Main
{
    // Function to perform DFS traversal on the graph on a graph
    private static void DFS(Graph graph, int v, boolean[] visited)
    {
        // mark current node as visited
        visited[v] = true;
 
        // do for every edge `v â€”> u`
        for (int u: graph.adjList.get(v))
        {
            // `u` is not visited
            if (!visited[u]) {
                DFS(graph, u, visited);
            }
        }
    }
 
    // Check if the graph is strongly connected or not
    public static boolean check(Graph graph, int N)
    {
        // do for every vertex
        for (int i = 0; i < N; i++)
        {
            // to keep track of whether a vertex is visited or not
            boolean[] visited = new boolean[N];
 
            // start DFS from the first vertex
            DFS(graph, i, visited);
 
            // If DFS traversal doesn't visit all vertices,
            // then the graph is not strongly connected
            for (boolean b: visited)
            {
                if (!b) {
                    return false;
                }
            }
        }
 
        return true;
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
        List<Edge> edges = Arrays.asList(
                new Edge(0, 4), new Edge(1, 0), new Edge(1, 2),
                new Edge(2, 1), new Edge(2, 4), new Edge(3, 1),
                new Edge(3, 2) , new Edge(4, 3)
        );
 
        // total number of nodes in the graph
        final int N = 5;
 
        // construct graph
        Graph graph = new Graph(edges, N);
 
        // check if the graph is not strongly connected or not
        if (check(graph, N)) {
            System.out.println("The graph is strongly connected");
        }
        else {
            System.out.println("The graph is not strongly connected");
        }
    }
}
